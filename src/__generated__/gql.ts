/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "\n  query GetContentNode(\n    $id: ID!\n    $idType: ContentNodeIdTypeEnum!\n    $asPreview: Boolean!\n  ) {\n    contentNode(id: $id, idType: $idType, asPreview: $asPreview) {\n      ... on Page {\n        editorBlocks {\n          __typename\n          name\n          id: clientId\n          parentId: parentClientId\n          apiVersion\n          blockEditorCategoryName\n          cssClassNames\n          isDynamic\n          renderedHtml\n        }\n      }\n      ... on Post {\n        editorBlocks {\n          __typename\n          name\n          id: clientId\n          parentId: parentClientId\n          apiVersion\n          blockEditorCategoryName\n          cssClassNames\n          isDynamic\n          renderedHtml\n        }\n      }\n      ... on SimpleProduct {\n        __typename\n        id\n        slug\n        uri\n        content\n      }\n      date\n    }\n  }\n": types.GetContentNodeDocument,
    "\n      query GetLayout {\n        generalSettings {\n          title\n          description\n        }\n        primaryMenu: menu(id: \"primary\", idType: LOCATION) {\n          __typename # Menu\n          id\n          name\n          menuItems {\n            __typename # MenuToMenuItemConnection\n            nodes {\n              __typename # MenuItem\n              id\n              key: id\n              parentId\n              label\n              uri\n            }\n          }\n        }\n        footerMenu: menu(id: \"footer\", idType: LOCATION) {\n          __typename # Menu\n          id\n          name\n          menuItems {\n            __typename # MenuToMenuItemConnection\n            nodes {\n              __typename # MenuItem\n              id\n              key: id\n              parentId\n              label\n              uri\n            }\n          }\n        }\n      }\n    ": types.GetLayoutDocument,
    "\n      query GetViewer {\n        viewer {\n          name\n          posts {\n            nodes {\n              id\n              title\n            }\n          }\n        }\n      }\n    ": types.GetViewerDocument,
    "\n    query GetFrontPage {\n      generalSettings {\n        title\n      }\n      page(id: \"/\", idType: URI) {\n        title\n        content\n        editorBlocks {\n          __typename\n          name\n          id: clientId\n          parentId: parentClientId\n          apiVersion\n          blockEditorCategoryName\n          cssClassNames\n          isDynamic\n          renderedHtml\n        }\n      }\n    }\n  ": types.GetFrontPageDocument,
    "\n  query ProductBySlug($id: ID = \"\", $idType: ProductIdTypeEnum = SLUG) {\n    product(id: $id, idType: $idType) {\n      __typename\n      id\n      slug\n      uri\n      content\n      name\n      ... on Product {\n        name\n        title\n      }\n      ... on ProductUnion {\n        name\n        shortDescription\n        sku\n        slug\n        onSale\n        featured\n      }\n      ... on SimpleProduct {\n        price\n        salePrice\n        regularPrice\n      }\n      ... on VariableProduct {\n        price\n        salePrice\n        regularPrice\n      }\n    }\n  }\n": types.ProductBySlugDocument,
    "\n  query GetProducts {\n    products {\n      pageInfo {\n        hasPreviousPage\n        hasNextPage\n        startCursor\n        endCursor\n      }\n      found\n      nodes {\n        id\n        databaseId\n        slug\n        name\n        type\n        ... on ProductUnion {\n          shortDescription(format: RAW)\n        }\n        image {\n          ... on MediaItem {\n            id\n            sourceUrl(size:WOOCOMMERCE_THUMBNAIL)\n            altText\n          }\n        }\n        ... on ProductWithPricing {\n          price\n          regularPrice\n          salePrice\n        }\n        ... on InventoriedProduct {\n          stockStatus\n          stockQuantity\n          soldIndividually\n        }\n      }\n    }\n  }\n": types.GetProductsDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetContentNode(\n    $id: ID!\n    $idType: ContentNodeIdTypeEnum!\n    $asPreview: Boolean!\n  ) {\n    contentNode(id: $id, idType: $idType, asPreview: $asPreview) {\n      ... on Page {\n        editorBlocks {\n          __typename\n          name\n          id: clientId\n          parentId: parentClientId\n          apiVersion\n          blockEditorCategoryName\n          cssClassNames\n          isDynamic\n          renderedHtml\n        }\n      }\n      ... on Post {\n        editorBlocks {\n          __typename\n          name\n          id: clientId\n          parentId: parentClientId\n          apiVersion\n          blockEditorCategoryName\n          cssClassNames\n          isDynamic\n          renderedHtml\n        }\n      }\n      ... on SimpleProduct {\n        __typename\n        id\n        slug\n        uri\n        content\n      }\n      date\n    }\n  }\n"): (typeof documents)["\n  query GetContentNode(\n    $id: ID!\n    $idType: ContentNodeIdTypeEnum!\n    $asPreview: Boolean!\n  ) {\n    contentNode(id: $id, idType: $idType, asPreview: $asPreview) {\n      ... on Page {\n        editorBlocks {\n          __typename\n          name\n          id: clientId\n          parentId: parentClientId\n          apiVersion\n          blockEditorCategoryName\n          cssClassNames\n          isDynamic\n          renderedHtml\n        }\n      }\n      ... on Post {\n        editorBlocks {\n          __typename\n          name\n          id: clientId\n          parentId: parentClientId\n          apiVersion\n          blockEditorCategoryName\n          cssClassNames\n          isDynamic\n          renderedHtml\n        }\n      }\n      ... on SimpleProduct {\n        __typename\n        id\n        slug\n        uri\n        content\n      }\n      date\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n      query GetLayout {\n        generalSettings {\n          title\n          description\n        }\n        primaryMenu: menu(id: \"primary\", idType: LOCATION) {\n          __typename # Menu\n          id\n          name\n          menuItems {\n            __typename # MenuToMenuItemConnection\n            nodes {\n              __typename # MenuItem\n              id\n              key: id\n              parentId\n              label\n              uri\n            }\n          }\n        }\n        footerMenu: menu(id: \"footer\", idType: LOCATION) {\n          __typename # Menu\n          id\n          name\n          menuItems {\n            __typename # MenuToMenuItemConnection\n            nodes {\n              __typename # MenuItem\n              id\n              key: id\n              parentId\n              label\n              uri\n            }\n          }\n        }\n      }\n    "): (typeof documents)["\n      query GetLayout {\n        generalSettings {\n          title\n          description\n        }\n        primaryMenu: menu(id: \"primary\", idType: LOCATION) {\n          __typename # Menu\n          id\n          name\n          menuItems {\n            __typename # MenuToMenuItemConnection\n            nodes {\n              __typename # MenuItem\n              id\n              key: id\n              parentId\n              label\n              uri\n            }\n          }\n        }\n        footerMenu: menu(id: \"footer\", idType: LOCATION) {\n          __typename # Menu\n          id\n          name\n          menuItems {\n            __typename # MenuToMenuItemConnection\n            nodes {\n              __typename # MenuItem\n              id\n              key: id\n              parentId\n              label\n              uri\n            }\n          }\n        }\n      }\n    "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n      query GetViewer {\n        viewer {\n          name\n          posts {\n            nodes {\n              id\n              title\n            }\n          }\n        }\n      }\n    "): (typeof documents)["\n      query GetViewer {\n        viewer {\n          name\n          posts {\n            nodes {\n              id\n              title\n            }\n          }\n        }\n      }\n    "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query GetFrontPage {\n      generalSettings {\n        title\n      }\n      page(id: \"/\", idType: URI) {\n        title\n        content\n        editorBlocks {\n          __typename\n          name\n          id: clientId\n          parentId: parentClientId\n          apiVersion\n          blockEditorCategoryName\n          cssClassNames\n          isDynamic\n          renderedHtml\n        }\n      }\n    }\n  "): (typeof documents)["\n    query GetFrontPage {\n      generalSettings {\n        title\n      }\n      page(id: \"/\", idType: URI) {\n        title\n        content\n        editorBlocks {\n          __typename\n          name\n          id: clientId\n          parentId: parentClientId\n          apiVersion\n          blockEditorCategoryName\n          cssClassNames\n          isDynamic\n          renderedHtml\n        }\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query ProductBySlug($id: ID = \"\", $idType: ProductIdTypeEnum = SLUG) {\n    product(id: $id, idType: $idType) {\n      __typename\n      id\n      slug\n      uri\n      content\n      name\n      ... on Product {\n        name\n        title\n      }\n      ... on ProductUnion {\n        name\n        shortDescription\n        sku\n        slug\n        onSale\n        featured\n      }\n      ... on SimpleProduct {\n        price\n        salePrice\n        regularPrice\n      }\n      ... on VariableProduct {\n        price\n        salePrice\n        regularPrice\n      }\n    }\n  }\n"): (typeof documents)["\n  query ProductBySlug($id: ID = \"\", $idType: ProductIdTypeEnum = SLUG) {\n    product(id: $id, idType: $idType) {\n      __typename\n      id\n      slug\n      uri\n      content\n      name\n      ... on Product {\n        name\n        title\n      }\n      ... on ProductUnion {\n        name\n        shortDescription\n        sku\n        slug\n        onSale\n        featured\n      }\n      ... on SimpleProduct {\n        price\n        salePrice\n        regularPrice\n      }\n      ... on VariableProduct {\n        price\n        salePrice\n        regularPrice\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetProducts {\n    products {\n      pageInfo {\n        hasPreviousPage\n        hasNextPage\n        startCursor\n        endCursor\n      }\n      found\n      nodes {\n        id\n        databaseId\n        slug\n        name\n        type\n        ... on ProductUnion {\n          shortDescription(format: RAW)\n        }\n        image {\n          ... on MediaItem {\n            id\n            sourceUrl(size:WOOCOMMERCE_THUMBNAIL)\n            altText\n          }\n        }\n        ... on ProductWithPricing {\n          price\n          regularPrice\n          salePrice\n        }\n        ... on InventoriedProduct {\n          stockStatus\n          stockQuantity\n          soldIndividually\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetProducts {\n    products {\n      pageInfo {\n        hasPreviousPage\n        hasNextPage\n        startCursor\n        endCursor\n      }\n      found\n      nodes {\n        id\n        databaseId\n        slug\n        name\n        type\n        ... on ProductUnion {\n          shortDescription(format: RAW)\n        }\n        image {\n          ... on MediaItem {\n            id\n            sourceUrl(size:WOOCOMMERCE_THUMBNAIL)\n            altText\n          }\n        }\n        ... on ProductWithPricing {\n          price\n          regularPrice\n          salePrice\n        }\n        ... on InventoriedProduct {\n          stockStatus\n          stockQuantity\n          soldIndividually\n        }\n      }\n    }\n  }\n"];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;